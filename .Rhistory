rm row_min2
rm row_mins2
rm(row_mins2)
i = {min, max}
i = min, max
i = min max
temp = 2
rm(temp)
i <- min max
row_min <- apply(dat, 1, min)
row_max <- apply(dat, 1, max)
row_sd <- apply(dat, 1, sd)
col_min <- apply(dat, 2, min)
col_max <- apply(dat, 2, max)
col_sd <- apply(dat, 2, sd)
rm(row_mins)
rm(row_maxs)
rm(row_sds)
rm(col_sds)
rm(col_mins)
rm(col_maxs)
rm(i)
?summary
summary(dat)
summary(dat)
summary(dat[4:6, ])
summary(dat[4:6, 1])
row_max
plot(row_max)
>plot
?plot
plot(row_max, type = "l") #default type is p for points
plot(column_sd, type="l")
plot(col_sd, type="l")
for_plot = apply(dat[1:10], 1, mean)
plot(for_plot, type="l")
plot(for_plot, type="l")
row_means1to10 = apply(dat[1:10], 1, mean)
plot(row_means1to10, type="l")
rm(for_plot)
dat1to10 <- dat[1:10, ]
dat1to10
dat1to10 <- dat[1:10, ]
col_means1to10 <- apply(dat1to10, 2, means)
dat1to10 <- dat[1:10, ]
col_means1to10 <- apply(dat1to10, 2, mean)
dat1to10 <- dat[1:10, ]
col_means1to10 <- apply(dat1to10, 2, mean)
plot(col_means1to10)
##### 1. INTRO TO FILES #####
setwd("~/Desktop/r-novice-inflammation")
read.csv(file = "data/inflammation-01.csv")
# ?read.csv
# to get R documentation
# header is true by default, need to include if we want to change it
read.csv(file = "data/inflammation-01.csv", header = FALSE)
read.csv(file = "data/inflammation-01.csv", header = TRUE)
##### 2. INTRO TO VARIABLES, TYPES, ETC #####
weight_kg <- 55 # will show up in global environment section (top right)
#to get value of variable, just enter weight_kg in console. arrow is assignment operator
weight_lb <- weight_kg * 2.2
#the one next to the value returned is the index
# if you do weight_kg <- 60, weight_kg changes but weight_lb does not. does not dynamically update variables.
(weight_kg <- 60) #assigns the value, and R automatically prints the value
class(weight_kg) #checks variable type, returns "numeric" in this case
string_cheese <- "CHEESE, GROMET"
class(string_cheese) # returns "character"
##### 3. VARIABLES, DATA, AND TYPES #####
dat <- read.csv(file = "data/inflammation-01.csv", header = FALSE)
#read.csv("data/inflammation-01.csv", FALSE) also works, as long as the order is correct
#if you name them, you don't need to worry about the order
head(dat)
head(dat, n = 10)
class(dat) # returns "data.frame"
# a data frame doesn't have to be all the same type of data. BUT everything in a row has to be same type
dim(dat) #gives us dimensions as rows by columns, returns 60 40
dat[1,1] #return value in row 1, column 1
#NOTE: indexing starts at 1, not at 0
dat[c(1,2,5), c(7, 8, 9)] # function c is for combine/concatenate
# look at 1st, 2nd, and 5th row, and columns 7, 8, and 9. returns that submatrix
dat[1, ] #all values in the first row. all of the columns and the first row
dat[, 1]
dat[, c(1,2)]
dat[c(1,2,3,4,5),] #first five rows
dat[1:5, ] #an easier way to do it. colon creates a vector out of the sequence
#1:5 generates all integers from 1 to 5 and returns that vector
##### 4. FUNCTIONS FOR SUMMARIZING DATA #####
patient_10 <- dat[10, ]
min(patient_10)
max(patient_10)
# mean(patient_10) --> this doesn't work
class(patient_10) #data.frame --> mean can't work with data frames. patient_10 is 1 obs of 40 variables
#fix this by forcing a type conversion. make it treat patient_10 as a vector of values
patient_10
as.numeric(patient_10) #no longer has the headers, is just a numeric vector
mean(as.numeric(patient_10))
#data frame vs matrix: data frame can have columns that are different types. matrix has to be all same type
#instead of assigning patients to each row:
apply(dat, 1, mean) #look at all of the rows and run mean across them.
#when it looks at a row, it sees them all as numeric, rather than a data frame
#what we're getting back is the mean of each row. runs mean across every row in the dataframe
row_means <- apply(dat, 1, mean)
length(row_means)
col_means <- apply(dat, 2, mean)
class(col_means) #returns "numeric", didn't keep it as a data frame
##### ExerciseA: use apply to summarize dat with functions min, max, sd #####
row_min <- apply(dat, 1, min)
row_max <- apply(dat, 1, max)
row_sd <- apply(dat, 1, sd)
col_min <- apply(dat, 2, min)
col_max <- apply(dat, 2, max)
col_sd <- apply(dat, 2, sd)
row_mins2 <- 0
for(i in 1:10) {
row_mins2[i] <- min(dat[i, ])
}
rm(row_mins2) #get rid of this from workspace
summary(dat)
summary(dat[4:6, 1])
##### 5. PLOTTING #####
plot(row_max) #girl you ugly
plot(row_max, type = "l") #default type is p for points
plot(col_sd, type="l")
##### ExerciseB: make a plot of mean value across patients 1-10 for all columns #####
#means of each row
row_means1to10 <- apply(dat[1:10], 1, mean)
plot(row_means1to10, type="l")
#means of each column
# col_means1to10 <- apply(dat[1:10, ], 2, mean)
# plot(col_means1to10, type = "l", ylab = "Mean", xlab = "Days")
plot(apply(dat[1:10, ], 2, mean), type="l", ylab = "Mean",
xlab = "Days", main = "Mean inflammation across days")
##### 6. WRITING FUNCTIONS ####
fahrenheit_to_kelvin <- function(tempF) {
tempK <- (tempF - 32) * (5/9) + 273.15
return(tempK)
}
(tempK<- fahrenheit_to_kelvin(51))
divide_by_input <- function(input) {
input / 5
}
divide_by_input(5)
#if you don't assign, whatever returns in the last line is returned (but didn't work before
#because we assigned to a variable rather than returning)
fahrenheit_to_kelvin2 <- function(tempF) {
(tempF - 32) * (5/9) + 273.15 #in general, assigning to variables keeps things organized
}
fahrenheit_to_kelvin2(51) #same output as before
fahrenheit_to_celsius <- function(tempF) {
tempC <- (tempF - 32) * (5/9)
return(tempC)
}
rm(fahrenheit_to_kelvin2)
fahrenheit_to_celsius(51)
all.equal(fahrenheit_to_kelvin(51), fahrenheit_to_kelvin3(51))
fahrenheit_to_kelvin3 <- function(tempF) {
tempK <- fahrenheit_to_celsius(tempF) + 273.15
return(tempK)
}
# check outputs match
all.equal(fahrenheit_to_kelvin(51), fahrenheit_to_kelvin3(51))
col_min #test of column min
sum(1, 2)
minmaxsum <- function(vector) {
min = min(vector)
max = max(vector)
sum(min, max)
}
minmaxsum <- function(vector) {
min = min(vector)
max = max(vector)
sum(min, max)
}
minmaxsum(col_min)
min(col_min)
max(col_min)
minmaxsum <- function(vector) {
min <- min(vector)
max <- max(vector)
sum(min, max)
}
# min <- min(vector)
# max <- max(vector)
minmax_sun <- sum(min(vector), max(vector))
return(minmax_sum)
# sum(min, max)
}
minmaxsum <- function(vector) {
# min <- min(vector)
# max <- max(vector)
minmax_sun <- sum(min(vector), max(vector))
return(minmax_sum)
# sum(min, max)
}
minmaxsum(col_min) #returns 5. min is 0, max is 5
minmaxsum <- function(vector) {
# min <- min(vector)
# max <- max(vector)
minmax_sum <- sum(min(vector), max(vector))
return(minmax_sum)
# sum(min, max)
}
minmaxsum(col_min) #returns 5. min is 0, max is 5
fahrenheit_conversion <- function(tempF, to) {
if(to == "celsius") {
tempC <- fahrenheit_to_celsius(tempF)
return(tempC)
} else {
tempK = fahrenheit_to_kelvin(tempF)
return(tempK)
}
}
fahrenheit_conversion(51, "celsius")
fahrenheit_to_celsius(51)
all.equal(fahrenheit_conversion(51, "celsius"), fahrenheit_to_celsius(51))
all.equal(fahrenheit_conversion(51, "Kelvin"), fahrenheit_to_kelvin(51))
fahrenheit_conversion <- function(tempF, to) {
if(to == "celsius") {
temp_out <- fahrenheit_to_celsius(tempF)
} else {
temp_out = fahrenheit_to_kelvin(tempF)
}
return(temp_out)
}
all.equal(fahrenheit_conversion(51, "celsius"), fahrenheit_to_celsius(51))
all.equal(fahrenheit_conversion(51, "Kelvin"), fahrenheit_to_kelvin(51)) #both return TRUE
lower("Kelvin")
tolower("Kelvin")
fahrenheit_conversion <- function(tempF, to) {
if(tolower(to) == "celsius") {
temp_out <- fahrenheit_to_celsius(tempF)
} else if (tolower(to) == "kelvin") {
temp_out = fahrenheit_to_kelvin(tempF)
} else {
message("Unexpected input for argument 2")
}
return(temp_out)
}
all.equal(fahrenheit_conversion(51, "celsius"), fahrenheit_to_celsius(51))
all.equal(fahrenheit_conversion(51, "Kelvin"), fahrenheit_to_kelvin(51)) #both return TRUE
fahrenheit_conversion(51, "fahrenheit")
fahrenheit_conversion <- function(tempF, to) {
if(tolower(to) == "celsius") {
temp_out <- fahrenheit_to_celsius(tempF)
} else if (tolower(to) == "kelvin") {
temp_out = fahrenheit_to_kelvin(tempF)
} else {
message("Unexpected input for argument 2. Acceptable arguments are
'celsius' and 'kelvin' (not case sensitive).")
}
return(temp_out)
}
all.equal(fahrenheit_conversion(51, "celsius"), fahrenheit_to_celsius(51))
all.equal(fahrenheit_conversion(51, "Kelvin"), fahrenheit_to_kelvin(51)) #both return TRUE
fahrenheit_conversion(51, "fahrenheit")
fahrenheit_conversion <- function(tempF, to) {
if(tolower(to) == "celsius") {
temp_out <- fahrenheit_to_celsius(tempF)
} else if (tolower(to) == "kelvin") {
temp_out = fahrenheit_to_kelvin(tempF)
} else {
message("Unexpected input for argument 2. Acceptable arguments are
'celsius' and 'kelvin' (not case sensitive).")
}
return(temp_out)
}
all.equal(fahrenheit_conversion(51, "celsius"), fahrenheit_to_celsius(51))
all.equal(fahrenheit_conversion(51, "Kelvin"), fahrenheit_to_kelvin(51)) #both return TRUE
fahrenheit_conversion(51, "fahrenheit")
fahrenheit_conversion <- function(tempF, to) {
if(tolower(to) == "celsius") {
temp_out <- fahrenheit_to_celsius(tempF)
} else if (tolower(to) == "kelvin") {
temp_out = fahrenheit_to_kelvin(tempF)
} else {
message("Unexpected input for argument 2. Acceptable arguments are
'celsius' and 'kelvin' (not case sensitive).")
}
return(temp_out)
}
all.equal(fahrenheit_conversion(51, "celsius"), fahrenheit_to_celsius(51))
all.equal(fahrenheit_conversion(51, "Kelvin"), fahrenheit_to_kelvin(51)) #both return TRUE
fahrenheit_conversion(51, "fahrenheit")
fahrenheit_conversion <- function(tempF, to = "celsius") {
if(tolower(to) == "celsius") {
temp_out <- fahrenheit_to_celsius(tempF)
} else if (tolower(to) == "kelvin") {
temp_out = fahrenheit_to_kelvin(tempF)
} else {
message("Unexpected input for argument 2. Acceptable arguments are
'celsius' and 'kelvin' (not case sensitive).")
return()
}
return(temp_out)
}
fahrenheit_conversion(51, "fahrenheit")
all.equal(fahrenheit_conversion(51, "Kelvin"), fahrenheit_to_kelvin(51)) #both return TRUE
fahrenheit_conversion("fiftyone", "celsius")
class(32)
2 != 3
1 != 1
fahrenheit_conversion <- function(tempF, to = "celsius") {
if(tolower(to) == "celsius") {
#check class of tempF
stopifnot(class(tempF) == "numeric")
temp_out <- fahrenheit_to_celsius(tempF)
} else if (tolower(to) == "kelvin") {
temp_out = fahrenheit_to_kelvin(tempF)
} else {
message("Unexpected input for argument 2. Acceptable arguments are
'celsius' and 'kelvin' (not case sensitive).")
return()
}
return(temp_out)
}
fahrenheit_conversion("fiftyone", "celsius")
fahrenheit_conversion <- function(tempF, to = "celsius") {
#check class of tempF
stopifnot(class(tempF) == "numeric")
if(tolower(to) == "celsius") {
temp_out <- fahrenheit_to_celsius(tempF)
} else if (tolower(to) == "kelvin") {
temp_out = fahrenheit_to_kelvin(tempF)
} else {
message("Unexpected input for argument 2. Acceptable arguments are
'celsius' and 'kelvin' (not case sensitive).")
return()
}
return(temp_out)
}
fahrenheit_conversion("fiftyone", "celsius")
fahrenheit_conversion <- function(tempF, to = "celsius") {
#check classes of tempF and to
stopifnot(class(tempF) == "numeric")
stopifnot(class(to) == "character")
if(tolower(to) == "celsius") {
temp_out <- fahrenheit_to_celsius(tempF)
} else if (tolower(to) == "kelvin") {
temp_out = fahrenheit_to_kelvin(tempF)
} else {
message("Unexpected input for argument 2. Acceptable arguments are
'celsius' and 'kelvin' (not case sensitive).")
return()
}
return(temp_out)
}
fahrenheit_conversion(51, "fahrenheit")
fahrenheit_conversion(51)
for j in input_temp {
temp_out <- fahrenheit_conversion(tempF, to)
converted_temps[j-49] <- temp_out
}
for j in input_temp {
temp_out <- fahrenheit_conversion(tempF, to)
converted_temps[j-49] <- temp_out
}
input_temp <- 50:90
converted_temps = 0
for j in input_temp {
temp_out <- fahrenheit_conversion(tempF, "celsius")
converted_temp[j-49] <- temp_out
}
for j in input_temp {
temp_out <- fahrenheit_conversion(tempF, "celsius")
converted_temp[j-49] <- temp_out
}
input_temp <- 50:90
converted_temps = 0
for j in input_temp {
temp_out <- fahrenheit_conversion(tempF, "celsius")
converted_temps[j-49] <- temp_out
}
input_temp <- 50:90
converted_temps = 0
for j in input_temp {}
temp_out <- fahrenheit_conversion(tempF, "celsius")
converted_temps[j-49] <- temp_out
}
plot(converted_temps, type="l")
input_temp <- 50:90
converted_temps = 0
for j in input_temp {
temp_out <- fahrenheit_conversion(tempF, "celsius")
converted_temps[j-49] <- temp_out
}
plot(converted_temps, type="l")
input_temp <- 50:90
converted_temps = 0
for j in input_temp {
temp_out <- fahrenheit_conversion(tempF, "celsius")
index = j - 49
converted_temps[index] <- temp_out
}
plot(converted_temps, type="l")
input_temp
for j in input_temp {
print j
}
input_temp <- 50:90
converted_temps = 0
for (j in input_temp) {
temp_out <- fahrenheit_conversion(tempF, "celsius")
index = j - 49
converted_temps[index] <- temp_out
}
plot(converted_temps, type="l")
input_temp <- 50:90
converted_temps = 0
for (j in input_temp) {
temp_out <- fahrenheit_conversion(j, "celsius")
index = j - 49
converted_temps[index] <- temp_out
}
plot(converted_temps, type="l")
input_temp <- 50:90
converted_temps = 0
for (j in 50:90) {
temp_out <- fahrenheit_conversion(j, "celsius")
index = j - 49
converted_temps[index] <- temp_out
}
plot(converted_temps, type="l")
for (j in 50:60) {
print j
}
for (j in 50:60) {
print(j)
}
for (j in 50:90) {
temp_out <- fahrenheit_conversion(j, "celsius")
index = j - 49
converted_temps[index] <- temp_out
}
for (j in 50:90) {
print(j)
temp_out <- fahrenheit_conversion(j, "celsius")
index = j - 49
converted_temps[index] <- temp_out
}
asnumeric("10")
as.numeric(10)
for (j in 50:90) {
print(j)
temp_out <- fahrenheit_conversion(as.numeric(j), "celsius")
index = j - 49
converted_temps[index] <- temp_out
}
for (j in 50:90) {
temp_out <- fahrenheit_conversion(as.numeric(j), "celsius")
index = j - 49
converted_temps[index] <- temp_out
}
plot(converted_temps, type="l")
converted_temps = 0
for (j in 50:90) {
temp_out <- fahrenheit_conversion(as.numeric(j), "celsius")
index = j - 49
converted_temps[index] <- temp_out
}
plot(converted_temps, type="l", xlab = "Fahrenheit", ylab = "Celsius")
plot(converted_temps, type="l", xlab = "Index, 50 to 90", ylab = "Celsius")
input_temp <- 50:90
converted_temps = 0
for (j in input_temp) {
temp_out <- fahrenheit_conversion(as.numeric(j), "celsius")
index = j - 49
converted_temps[index] <- temp_out
}
plot(converted_temps, type="l", xlab = "Index, 50 to 90", ylab = "Celsius")
plot(converted_temps, input_temp, type="l",
xlab = "Index, 50 to 90", ylab = "Celsius")
plot(converted_temps, type="l",
xlab = "Index, 50 to 90", ylab = "Celsius")
input temp
fahrenheit_conversion_plot <- function(tempF, to = "celsius") {
#check classes of tempF and to
stopifnot(class(tempF) == "numeric")
stopifnot(class(to) == "character")
if(tolower(to) == "celsius") {
temp_out <- fahrenheit_to_celsius(tempF)
} else if (tolower(to) == "kelvin") {
temp_out = fahrenheit_to_kelvin(tempF)
} else {
message("Unexpected input for argument 2. Acceptable arguments are
'celsius' and 'kelvin' (not case sensitive).")
return()
}
plot(temp_out, type="l")
}
fahrenheit_conversion_plot(50:90)
fahrenheit_conversion_plot(as.numberic(50:90)
fahrenheit_conversion_plot(as.numberic(50:90)
fahrenheit_conversion_plot(as.numberic(50:90)
fahrenheit_conversion_plot(input_temp2)
fahrenheit_conversion_plot <- function(tempF, to = "celsius") {
#check classes of tempF and to
stopifnot(class(tempF) == "numeric")
stopifnot(class(to) == "character")
if(tolower(to) == "celsius") {
temp_out <- fahrenheit_to_celsius(tempF)
} else if (tolower(to) == "kelvin") {
temp_out = fahrenheit_to_kelvin(tempF)
} else {
message("Unexpected input for argument 2. Acceptable arguments are
'celsius' and 'kelvin' (not case sensitive).")
return()
}
plot(temp_out, type="l")
}
input_temp <- 50:90
input_temp2 <- as.numeric(input_temp)
fahrenheit_conversion_plot(input_temp2)
